{"version":3,"sources":["duck/time.js","duck/store.js","TimeZoneConverterApp.js","index.js"],"names":["CONVERTER","LOADING","ERROR","convertTimeMiddleware","formValues","dispatch","type","fetch","method","headers","Accept","body","JSON","stringify","then","data","json","response","status","convertTime","setErrorConverter","catch","err","console","log","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","time","state","action","loading","store","createStore","applyMiddleware","thunk","TimeZoneConverterApp","useDispatch","useSelector","getTimeCurrent","moment","format","useFormik","initialValues","timezone","validationSchema","Yup","shape","required","onSubmit","values","handleSubmit","handleChange","errors","className","style","height","backgroundColor","padding","textAlign","color","fontWeight","fontSize","marginBottom","map","noValidate","htmlFor","id","name","placeholder","onChange","value","role","toUpperCase","ReactDOM","render","document","getElementById"],"mappings":"oNAGMA,EAAY,uBACZC,EAAU,oBACVC,EAAQ,6BAiCDC,EAAwB,SAACC,GACpC,OAAO,SAACC,GACNA,EAb6B,CAC/BC,KAAML,IAaJM,MAzCY,oDAyCG,CACbC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUT,KAEpBU,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,YAAmB,IAAhBG,EAAe,EAAfA,SACHA,EAASC,OACXb,EA9BiB,SAACY,GAAD,MAAe,CACxCX,KAAMN,EACNiB,YA4BiBE,CAAYF,IAErBZ,EAvBuB,SAACY,GAAD,MAAe,CAC9CX,KAAMJ,EACNe,YAqBiBG,CAAkBH,OAG9BI,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,MAAOF,QCrDnCG,EACe,qBAAXC,QACNA,OAAOC,sCACTC,IAEIC,EAAWC,YAAgB,CAC/BC,KDFyB,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACjD,OAAQA,EAAO3B,MACb,KAAKN,EACH,OAAO,eAAKiC,EAAOhB,UACrB,KAAKhB,EACH,MAAO,CAAEiC,SAAS,GACpB,KAAKhC,EACH,OAAO,eAAK+B,EAAOhB,UACrB,QACE,OAAOe,MCJAG,EAAQC,YACnBP,EACAJ,EAAiBY,YAAgBC,O,iCCRtBC,EAAuB,WAClC,IAAMlC,EAAWmC,cACXR,EAAQS,aAAY,SAACT,GAAD,OAAWA,EAAMD,QAGrCW,EAAiB,kBAAMC,MAASC,OAAO,aAE7CrB,QAAQC,IAAIkB,KAP4B,MASeG,YAAU,CAC/DC,cAAe,CACbf,KAAMW,IACNK,SAR2BJ,MAASC,OAAO,MAU7CI,iBAAkBC,MAAaC,MAAM,CACnCnB,KAAMkB,MAAaE,SAAS,YAC5BJ,SAAUE,MAAaE,SAAS,cAElCC,SAAU,SAACC,GACThD,EAASF,EAAsBkD,OAV3BC,EATgC,EAShCA,aAAcC,EATkB,EASlBA,aAAcF,EATI,EASJA,OAAQG,EATJ,EASIA,OAc5C,OACE,qBAAKC,UAAU,kBAAf,SACE,sBAAKA,UAAU,MAAMC,MAAO,CAAEC,OAAQ,SAAtC,UACE,qBACEF,UAAU,WACVC,MAAO,CACLE,gBAAiB,UACjBC,QAAS,QAJb,SAOE,qBACEJ,UAAU,mDACVC,MAAO,CAAEC,OAAQ,QAFnB,SAIE,sBAAKF,UAAU,YAAf,UACE,oBACEC,MAAO,CACLI,UAAW,SACXC,MAAO,OACPC,WAAY,OACZC,SAAU,OACVC,aAAc,QANlB,sCAWClC,EAAMwB,QACL,qBAAKC,UAAU,qBAAf,SACGzB,EAAMwB,OAAOW,KAAI,SAAC7C,GAAD,OAChB,4BAAcA,GAANA,QAKd,uBACE8B,SAAUE,EACVG,UAAU,2BACVW,YAAU,EAHZ,UAKE,sBAAKX,UAAU,YAAf,UACE,uBAAOY,QAAQ,OAAOZ,UAAU,wBAAhC,kBAGA,uBACEnD,KAAK,OACLmD,UAAU,eACVa,GAAG,OACHC,KAAK,OACLC,YAAY,eACZC,SAAUlB,EACVmB,MAAOrB,EAAOtB,OAEfyB,EAAOzB,MACN,qBAAK0B,UAAU,cAAf,SAA8BD,EAAOzB,UAGzC,sBAAK0B,UAAU,YAAf,UACE,uBAAOY,QAAQ,WAAWZ,UAAU,wBAApC,uBAGA,uBACEnD,KAAK,OACLmD,UAAU,eACVa,GAAG,WACHC,KAAK,WACLC,YAAY,YACZE,MAAOrB,EAAON,SACd0B,SAAUlB,IAGXC,EAAOT,UACN,qBAAKU,UAAU,cAAf,SAA8BD,EAAOT,cAIzC,qBAAKU,UAAU,SAAf,SACE,wBAAQA,UAAU,wBAAwBnD,KAAK,SAA/C,0CAQV,qBAAKmD,UAAU,WAAWC,MAAO,CAAEE,gBAAiB,WAApD,SACE,qBACEH,UAAU,mDACVC,MAAO,CAAEC,OAAQ,QAFnB,SAIE,sBAAKD,MAAO,CAAEI,UAAW,UAAzB,UACE,oBAAIJ,MAAO,CAAEO,SAAU,QAAvB,iCACCjC,EAAME,SACL,qBAAKuB,UAAU,iBAAiBkB,KAAK,SAArC,SACE,sBAAMlB,UAAU,kBAAhB,0BAGHzB,EAAMD,MACL,gCACE,oBAAI2B,MAAO,CAAEO,SAAU,QAAvB,gCACA,oBAAGP,MAAO,CAAEO,SAAU,QAAtB,UACGjC,EAAMD,KADT,IACgBC,EAAMe,SAAS6B,iCC5HjDC,IAASC,OACP,cAAC,IAAD,CAAU3C,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF4C,SAASC,eAAe,W","file":"static/js/main.f729411e.chunk.js","sourcesContent":["const URL_API = \"https://time-zone-converter-api.herokuapp.com/api\";\n\n// Acion Types\nconst CONVERTER = \"[Converter] Time UTC\";\nconst LOADING = \"[Loading] Loading\";\nconst ERROR = \"[Converter] Time UTC Error\";\n\n//Reducer\nexport const timeReducer = (state = {}, action) => {\n  switch (action.type) {\n    case CONVERTER:\n      return { ...action.response };\n    case LOADING:\n      return { loading: true };\n    case ERROR:\n      return { ...action.response };\n    default:\n      return state;\n  }\n};\n\n//Action Creators\nexport const convertTime = (response) => ({\n  type: CONVERTER,\n  response,\n});\n\nexport const setLoading = () => ({\n  type: LOADING,\n});\n\nexport const setErrorConverter = (response) => ({\n  type: ERROR,\n  response,\n});\n\n// Middleware\n\nexport const convertTimeMiddleware = (formValues) => {\n  return (dispatch) => {\n    dispatch(setLoading());\n    fetch(URL_API, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(formValues),\n    })\n      .then((data) => data.json())\n      .then(({ response }) => {\n        if (response.status) {\n          dispatch(convertTime(response));\n        } else {\n          dispatch(setErrorConverter(response));\n        }\n      })\n      .catch((err) => console.log(\"err\", err));\n  };\n};\n","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { timeReducer } from \"./time\";\n\nconst composeEnhancers =\n  (typeof window !== \"undefined\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst reducers = combineReducers({\n  time: timeReducer,\n});\n\nexport const store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { convertTimeMiddleware } from \"./duck/time\";\nimport moment from 'moment';\n\nexport const TimeZoneConverterApp = () => {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state.time);\n\n  const getTimeZoneLocal = () => moment().format(\"Z\");\n  const getTimeCurrent = () => moment().format(\"HH:mm:ss\");\n\n  console.log(getTimeCurrent())\n\n  const { handleSubmit, handleChange, values, errors } = useFormik({\n    initialValues: {\n      time: getTimeCurrent(),\n      timezone: getTimeZoneLocal(),\n    },\n    validationSchema: Yup.object().shape({\n      time: Yup.string().required(\"Required\"),\n      timezone: Yup.string().required(\"Required\"),\n    }),\n    onSubmit: (values) => {\n      dispatch(convertTimeMiddleware(values));\n    },\n  });\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\" style={{ height: \"100vh\" }}>\n        <div\n          className=\"col-md-6\"\n          style={{\n            backgroundColor: \"#252121\",\n            padding: \"50px\",\n          }}\n        >\n          <div\n            className=\"d-flex justify-content-center align-items-center\"\n            style={{ height: \"100%\" }}\n          >\n            <div className=\"container\">\n              <h1\n                style={{\n                  textAlign: \"center\",\n                  color: \"#FFF\",\n                  fontWeight: \"bold\",\n                  fontSize: \"28px\",\n                  marginBottom: \"40px\",\n                }}\n              >\n                Convert your time to UTC\n              </h1>\n              {state.errors && (\n                <div className=\"alert alert-danger\">\n                  {state.errors.map((err) => (\n                    <p key={err}>{err}</p>\n                  ))}\n                </div>\n              )}\n\n              <form\n                onSubmit={handleSubmit}\n                className=\"row g-3 needs-validation\"\n                noValidate\n              >\n                <div className=\"col-md-12\">\n                  <label htmlFor=\"time\" className=\"form-label text-white\">\n                    Time\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"time\"\n                    name=\"time\"\n                    placeholder=\"Ej. 18:23:21\"\n                    onChange={handleChange}\n                    value={values.time}\n                  />\n                  {errors.time && (\n                    <div className=\"text-danger\">{errors.time}</div>\n                  )}\n                </div>\n                <div className=\"col-md-12\">\n                  <label htmlFor=\"timezone\" className=\"form-label text-white\">\n                    Time Zone\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"timezone\"\n                    name=\"timezone\"\n                    placeholder=\"Ej. -4:30\"\n                    value={values.timezone}\n                    onChange={handleChange}\n                  />\n\n                  {errors.timezone && (\n                    <div className=\"text-danger\">{errors.timezone}</div>\n                  )}\n                </div>\n\n                <div className=\"col-12\">\n                  <button className=\"btn btn-primary w-100\" type=\"submit\">\n                    Convert Time Now\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-6\" style={{ backgroundColor: \"#FFFFFF\" }}>\n          <div\n            className=\"d-flex justify-content-center align-items-center\"\n            style={{ height: \"100%\" }}\n          >\n            <div style={{ textAlign: \"center\" }}>\n              <h1 style={{ fontSize: \"40px\" }}>Time Zone Converter</h1>\n              {state.loading && (\n                <div className=\"spinner-border\" role=\"status\">\n                  <span className=\"visually-hidden\">Loading...</span>\n                </div>\n              )}\n              {state.time && (\n                <div>\n                  <h1 style={{ fontSize: \"30px\" }}>Converter Results:</h1>\n                  <p style={{ fontSize: \"30px\" }}>\n                    {state.time} {state.timezone.toUpperCase()}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./duck/store\";\nimport { TimeZoneConverterApp } from \"./TimeZoneConverterApp\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <TimeZoneConverterApp />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}